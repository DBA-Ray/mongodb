#initial and start mongodb server
- name: Install base packages
  yum:
    name: "{{ packages }}"
    state: latest

- name: Install pymongo
  pip:
    name: pymongo
    state: latest
#    executable: pip3.6

- name: Stop mongodb server
  systemd:
    name: mongod
    state: stopped
  when: whether_uninstall

- name: Remove existing mongodb directory
  file:
    path: "{{ basedir }}"
    state: absent
    remote_src: 'True'
  when: whether_uninstall

- name: Rendering mongodb yum repo file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'mongodb-org.repo.j2', dest: '/etc/yum.repos.d/mongodb-org.repo' }

- name: Install mongodb via yum
  yum:
    name: mongodb-org*
    state: latest
  register: repo
  retries: 7
  until: repo is succeeded

- name: Create directories for mongodb
  file: path={{ item }} state=directory owner=mongod group=mongod mode=0760
  with_items:
    - "{{ shelldir }}"
    - "{{ monitordir }}"
    - "{{ basedir }}"
    - "{{ datadir }}"
    - "{{ keydir }}"
    - "{{ logdir }}"

- name: Copy keyfile to all members
  copy:
    src: keyfile
    dest: "{{ keydir }}/keyfile"
    owner: mongod
    group: mongod
    mode: 0600

#- name: Generate keyfile for mongodb
#  shell: "openssl rand -base64 756 > {{ keydir }}/keyfile"

- name: Rendering mongodb parameter file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: mongod
    group: mongod
    mode: 0660
  with_items:
    - { src: 'mongod.conf.j2', dest: "/etc/mongod.conf" }

#- name: Rendering bash file
#  template:
#    src: "{{ item.src }}"
#    dest: "{{ item.dest }}"
#    owner: root
#    group: root
#    mode: 0744
#  with_items:
#    - { src: 'mongod.conf_auto.sh.j2', dest: "{{ etcdir }}/mongod.conf_auto.sh" }

#- name: Auto config mongod.conf
#  shell: "sh -x {{ etcdir }}/mongod.conf_auto.sh"

- name: Modify mongod.server file
  lineinfile:
    dest: /usr/lib/systemd/system/mongod.service
    regexp: "^ExecStart=/usr/bin/mongod"
    line: "ExecStart=/usr/bin/numactl --interleave=all /usr/bin/mongod $OPTIONS"

- name: Daemon reload mongodb server
  systemd:
    daemon_reload: yes

- name: Enable mongodb server
  systemd:
    name: mongod
    enabled: yes

- name: Clean system's buffer and cache
  shell: "sysctl -w vm.drop_caches=1"

- name: Start mongodb server
  systemd:
    name: mongod
    state: started
  when: not is_shard_cluster_pro

- name: Create root user
  mongodb_user:
    database: admin
    name: root
    password: "{{ root_password }}"
    update_password: always
    roles: root
    state: present
  when: not is_shard_cluster_pro

- name: Add log polling task schedule for mongodb
  cron:
    name: "logrotate"
    weekday: "0"
    minute: "0"
    hour: "1"
    job: "mongo -u root -p \'{{ root_password }}\' --eval \"db.adminCommand( { logRotate : 1 } )\" > /dev/null 2>&1 &"
  when: not is_shard_cluster_pro